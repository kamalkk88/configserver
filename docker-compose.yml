
services:

  zipkin-server:
    image: 'openzipkin/zipkin'
    ports:
      - '9411:9411'

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  redis:
    image: redis:latest
    ports:
      - '6380:6379'
    volumes:
      - redis-data:/data

  config-server:
    build: .
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8071/actuator/health" ]
      interval: 10s
      timeout: 12s
      retries: 3
      start_period: 10s
    networks:
      default:
        aliases:
          - "config-server"
    volumes:
      - logs:/var/log/

  eureka-server:
    image: kamalkk88/eurekaserver:sep28dev
    ports:
      - "8070:8070"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8070/actuator/health" ]
      interval: 10s
      timeout: 12s
      retries: 3
      start_period: 10s
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      default:
        aliases:
          - "eureka-server"

  gateway-server:
    image: kamalkk88/gatewayserver:sep28dev
    ports:
      - "8072:8072"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8072/actuator/health" ]
      interval: 10s
      timeout: 12s
      retries: 3
      start_period: 10s
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy

  customer-service:
    image: kamalkk88/customerservice:sep28dev
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 10s
      timeout: 12s
      retries: 3
      start_period: 4s
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      gateway-server:
        condition: service_started

  hotelmanage-service:
    image: kamalkk88/hotelmanageservice:sep28dev
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/actuator/health" ]
      interval: 10s
      timeout: 12s
      retries: 3
      start_period: 4s
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      gateway-server:
        condition: service_started

  reservation-service:
    image: kamalkk88/reservationservice:sep28dev
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: 10s
      timeout: 12s
      retries: 3
      start_period: 4s
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      gateway-server:
        condition: service_started

  payment-service:
    image: kamalkk88/paymentservice:sep28dev
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/actuator/health" ]
      interval: 10s
      timeout: 12s
      retries: 3
      start_period: 4s
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      gateway-server:
        condition: service_started

  notification-service:
    image: kamalkk88/notificationservice:sep28dev
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8087/actuator/health" ]
      interval: 10s
      timeout: 12s
      retries: 3
      start_period: 4s
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      gateway-server:
        condition: service_started

volumes:
  redis-data: #docker will decide the path on the HD because we haven't provided the path
  logs:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/var/log/'